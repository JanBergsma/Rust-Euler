use euler::problem2::{a014445, a014445_iter, A014445};

#[test]
/// Each new term in the Fibonacci sequence is generated by adding the
/// previous two terms. By starting with 1 and 2, the first 10 terms will be:
/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
///
/// By considering the terms in the Fibonacci sequence whose values do not
/// exceed four million, find the sum of the even-valued terms.
fn test_a014445_even_fibonacci_numbers() {
    let result: Vec<u64> = (0..A014445.len() as u64).map(a014445).collect();
    assert_eq!(A014445.to_vec(), result);
}

#[test]
fn test_a014445_iter_even_fibonacci_numbers() {
    let result: Vec<u64> = a014445_iter(*A014445.last().unwrap()).collect();
    assert_eq!(A014445.to_vec(), result);
}

#[test]
fn test_sum_of_a014445_iter_for_smaller_then_4_000_000_should_be_4613732() {
    let expected: u64 = A014445.iter().filter(|n| **n < 4_000_000).sum();
    let result: u64 = a014445_iter(4_000_000).sum();
    assert_eq!(expected, result);
    assert_eq!(4_613_732, result);
}
